@startuml

'skinparam classAttributeIconSize 0

' ---------------------------
' Client MVC
' ---------------------------
package "Client MVC" {
  class ClientModel {
    - clientID : int
    - name : String
    - email : String
    - password : String
    - role : String
    - age : int
  }

  class ClientView {
    + displayClientInfo(prCLient: ClientModel) : void
    + getClientInput() : Map
  }

  class ClientController {
    + createClient(prClient: Map) : void
    + updateClient(prClient: Map) : void
    + deleteClient(prID: int) : void
  }

  ClientController ..> ClientModel : uses
  ClientController ..> ClientView : interacts with
}

' ---------------------------
' Attraction MVC
' ---------------------------
package "Attraction MVC" {
   abstract class AttractionModel {
      # int attractionID
      # double price
      # int capacity
      # String name
      # String category
      # String description
  }
   class RollerCoasterModel extends AttractionModel {
      - int loopCount
      - double height

      + String getType()
      }
   class SpectacleModel extends AttractionModel {
      - String type
      - String performerName

      + String getType()
      }
  class WaterRideModel extends AttractionModel {
      - int splashLevel

      + String getType()
      }

  class AttractionView {
    + displayAttraInfo(prAttraction: AttractionModel) : void
    + listAttra(prListAttra: List<AttractionModel>) : void
  }

  class AttractionController {
    + createAttra(prAttraction: Map) : void
    + updateAttra(prAttraction: Map) : void
    + deleteAttra(prID: int) : void
  }

  AttractionController ..> AttractionModel : uses
  AttractionController ..> AttractionView : interacts with

}
' ---------------------------
' Reservation MVC
' ---------------------------
package "Reservation MVC" {
  class ReservationModel {
    - reservationID : int
    - clientID : int
    - attractionID : int
    - reservationDate : Date
    - numberTickets : int
    - price : double
    - discount : double
  }

  class ReservationView {
    + displayReservation(prReservation: ReservationModel) : void
    + getReservationInput() : Map
  }

  class ReservationController {
    + createReservation(prReservation: Map) : void
    + cancelReservation(prID: int) : void
  }

  ReservationController ..> ReservationModel : uses
  ReservationController ..> ReservationView : interacts with
}


' ---------------------------
' Payment MVC
' ---------------------------
package "Payment MVC" {
  class PaymentModel {
    - paymentID : int
    - reservationID : int
    - amount : double
    - method : String
    - paymentDate : Date
  }

  class PaymentView {
    + displayPaymentInfo(prPayment: PaymentModel) : void
    + getPaymentInput() : Map
  }

  class PaymentController {
    + processPayment(prPayment: Map) : void
  }

  PaymentController ..> PaymentModel : uses
  PaymentController ..> PaymentView : interacts with
}
' ---------------------------
' Authentication MVC
' ---------------------------
package "Login MVC" {
  class LoginView {
    + getCredentials() : Map
    + displayLoginResult(success: boolean) : void
  }

  class LoginController {
    + authenticate(email: String, password: String) : ClientModel
    + getUserRole(client: ClientModel) : String
  }

  LoginController ..> LoginView : interacts with
  LoginController ..> ClientDAO : uses
}
' ---------------------------
' Registration MVC
' ---------------------------
package "Registration MVC" {

  class RegistrationView {
    + getRegistrationInput() : Map
    + displayRegistrationStatus(success: boolean) : void
  }

  class RegistrationController {
    + registerNewClient(prClientData: Map) : void
  }

  RegistrationController ..> RegistrationView : interacts with
  RegistrationController ..> ClientDAO : uses
}
' ---------------------------
' Reporting MVC
' ---------------------------
package "Reporting MVC" {
  class ReportingModel {
    + getMostPopularAttractions() : List<AttractionModel>
    + getRevenueByAttraction() : Map<String, Double>
  }

  class ReportingView {
    + displayChart(chartType: String, data: Map) : void
  }

  class ReportingController {
    + generateReport(reportType: String) : void
  }

  ReportingController ..> ReportingModel : uses
  ReportingController ..> ReportingView : interacts with
}




' ---------------------------
' Interfaces DAO
' ---------------------------
package "DAO Factory"{
interface IClientDAO {
  + getClientAll() : ArrayList<ClientModel>
  + getClient(prID : int) : ClientModel
  + saveClient(prClient : ClientModel) : void
  + updateClient(prClient : ClientModel) : void
  + deleteClient(prID : int) : void
}

interface IAttractionDAO {
  + getAttracAll() : ArrayList<AttractionModel>
  + getAttraction(prID : int) : AttractionModel
  + saveAttraction(prAttraction : AttractionModel) : void
  + updateAttraction(prAttraction : AttractionModel) : void
  + deleteAttraction(prID : int) : void
}

interface IReservationDAO {
  + getReservAll() : ArrayList<ReservationModel>
  + getReservation(prID : int) : ReservationModel
  + saveReservation(prReservation : ReservationModel) : void
  + updateReservation(prReservation : ReservationModel) : void
  + deleteReservation(prID : int) : void
}

interface IPaymentDAO {
  + getPaymentAll() : ArrayList<PaymentModel>
  + getPayment(prID : int) : PaymentModel
  + savePayment(prPayment : PaymentModel) : void
  + updatePayment(prPayment : PaymentModel) : void
  + deletePayment(prID : int) : void
}

' ---------------------------
' Impl√©mentations DAO
' ---------------------------
class ClientDAO {
  - DAOFactory daoFactory

  + getClientAll() : ArrayList<ClientModel>
  + getClient(prID : int) : ClientModel
  + saveClient(prClient : ClientModel) : void
  + updateClient(prClient : ClientModel) : void
  + deleteClient(prID : int) : void
}
ClientDAO ..|> IClientDAO

class AttractionDAO {
  - DAOFactory daoFactory

  + getAttracAll() : ArrayList<AttractionModel>
  + getAttraction(prID : int) : AttractionModel
  + saveAttraction(prAttraction : AttractionModel) : void
  + updateAttraction(prAttraction : AttractionModel) : void
  + deleteAttraction(prID : int) : void
}
AttractionDAO ..|> IAttractionDAO

class ReservationDAO {
  - DAOFactory daoFactory

  + getReservAll() : ArrayList<ReservationModel>
  + getReservation(prID : int) : ReservationModel
  + saveReservation(prReservation : ReservationModel) : void
  + updateReservation(prReservation : ReservationModel) : void
  + deleteReservation(prID : int) : void
}
ReservationDAO ..|> IReservationDAO

class PaymentDAO {
  - DAOFactory daoFactory

  + getPaymentAll() : ArrayList<PaymentModel>
  + getPayment(prID : int) : PaymentModel
  + savePayment(prPayment : PaymentModel) : void
  + updatePayment(prPayment : PaymentModel) : void
  + deletePayment(prID : int) : void
}
PaymentDAO ..|> IPaymentDAO

' ---------------------------
' DAO Factory
' ---------------------------
class DAOFactory {
  -String url
  -String username
  -String password


  +DAOFactory getInstance(prUrl:String,prUsername: String,prPassword : String)
  +getConnection():Connection
  +getClientDAO(): ClientDAO
  +getAttractionDAO(): AttractionDAO
  +getReservationDAO(): ReservationDAO
  +getPaymentDAO(): PaymentDAO
  +disconnect(): void
}

@enduml